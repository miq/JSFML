plugins {
  id 'java'
  id 'cpp'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

version '2.2-j6'

model {
  repositories {
    libs(PrebuiltLibraries) {
      // Java JNI headers
      // TODO: make this definition detect platform 
      jni {
        headers.srcDir this.properties['jni.header.dir']
        headers.srcDir new File(this.properties['jni.header.dir'], 'linux') 
      }
      // JNI headers generated by javah
      jsfml_jni {
        headers.srcDir 'src/main/jni'
      }
      // SFML library to build against
      // TODO: get this from conan after making it up-to-date
      sfml {
        headers.srcDir '../SFML/include'
        binaries.withType(PrebuiltSharedLibraryBinary) {
          sharedLibraryFile file('../sfml-build/lib/libsfml-system.so')
        }
      }
    }
  }
  components {
    jsfml(NativeLibrarySpec) {
      sources {
        cpp {
          source {
            srcDir 'src/main/cpp'
            include "**/*.cpp"
          }
          exportedHeaders {
            srcDirs 'src/main/cpp'
          }
          lib library: 'jsfml_jni', linkage: 'api'
          lib library: 'jni', linkage: 'api'
          lib library: 'sfml', linkage: 'shared'
        }
      }
    }
  }
}

task generateJniHeaders(type:Exec) {
    def classpath = sourceSets.main.java.outputDir
    def classFiles = fileTree(classpath) { include '**/*.class' }
    def classNames = classFiles.collect {
      it.absolutePath[classpath.toString().length() + 1..<it.absolutePath.lastIndexOf('.')].replaceAll('/', '.')
    }
    def nativeIncludes = "src/main/jni/JSFML/JNI"                     
    executable "javah"
    args "-d"
    args nativeIncludes
    args "-classpath"
    args classpath
    args classNames

    dependsOn classes
}

dependencies {

}

repositories {
  flatDir {
    dirs 'lib'
  }
}
